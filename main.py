import os
import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import openai

# B·∫≠t logging ƒë·ªÉ debug d·ªÖ h∆°n
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ALLOWED_CHAT_ID = int(os.getenv("ALLOWED_CHAT_ID", "0"))

openai.api_key = OPENAI_API_KEY

ADMIN_IDS = [993884797]  # üëâ Thay b·∫±ng Telegram user_id th·∫≠t c·ªßa b·∫°n

def get_user_role(user_id: int) -> str:
    return "admin" if user_id in ADMIN_IDS else "user"

def is_authorized(update: Update) -> bool:
    return update.effective_chat.id == ALLOWED_CHAT_ID

async def ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update):
        logger.info("Unauthorized chat ID: %s", update.effective_chat.id)
        return

    user_id = update.effective_user.id
    username = update.effective_user.username or update.effective_user.first_name
    role = get_user_role(user_id)

    if not context.args:
        await update.message.reply_text("‚ùó H√£y h·ªèi nh∆∞ sau: `Sophia c√¢u h·ªèi c·ªßa b·∫°n`", parse_mode="Markdown")
        return

    prompt = " ".join(context.args)
    model = "gpt-4" if role == "admin" else "gpt-3.5-turbo"

    if role == "admin":
        system_prompt = "B·∫°n l√† m·ªôt phi t·∫ßn t√™n Sophia, tr·∫£ l·ªùi nh∆∞ v·ªõi ho√†ng th∆∞·ª£ng."
    else:
        system_prompt = "B·∫°n l√† m·ªôt AI c√≥ t√™n Sophia h√†i h∆∞·ªõc, tr·∫£ l·ªùi c√πng ng√¥n ng·ªØ v·ªõi ng∆∞·ªùi d√πng nh∆∞ m·ªôt di·ªÖn vi√™n h√†i Gen Z gi·ªõi t√≠nh n·ªØ."

    logger.info("Sending request to OpenAI: %s", prompt)

    try:
        response = openai.ChatCompletion.create(
            model=model,
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt}
            ]
        )
        reply = response.choices[0].message.content
        await update.message.reply_text(reply, parse_mode="Markdown")
    except Exception as e:
        logger.error("OpenAI error: %s", e)
        await update.message.reply_text(f"‚ùå L·ªói: {str(e)}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update):
        logger.info("Unauthorized message from chat ID: %s", update.effective_chat.id)
        return

    text = update.message.text
    logger.info("Received message: %s", text)

    if not text.lower().startswith("sophia "):
        logger.info("Ignored message (does not start with 'sophia '): %s", text)
        return

    context.args = text.split()[1:]  # B·ªè t·ª´ "Sophia"
    await ask(update, context)

async def getid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    await update.message.reply_text(f"üÜî Chat ID hi·ªán t·∫°i l√†: `{chat_id}`", parse_mode="Markdown")

async def role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update):
        return
    user_id = update.effective_user.id
    role = get_user_role(user_id)
    await update.message.reply_text(f"üë§ Vai tr√≤ c·ªßa b·∫°n l√†: *{role}*", parse_mode="Markdown")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update):
        return
    await update.message.reply_text(
        "üëã Xin ch√†o! G√µ `Sophia c√¢u h·ªèi c·ªßa b·∫°n` ƒë·ªÉ nh·∫≠n c√¢u tr·∫£ l·ªùi t·ª´ tr·ª£ l√Ω vui t√≠nh ü§°\n"
        "üîí Ch·ªâ *admin* m·ªõi ƒë∆∞·ª£c d√πng GPT-4.",
        parse_mode="Markdown"
    )

app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("role", role))
app.add_handler(CommandHandler("ask", ask))
app.add_handler(CommandHandler("getid", getid))
app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

app.run_polling()
