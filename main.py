import logging
import os
import openai
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Load configuration
TELEGRAM_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
if not TELEGRAM_TOKEN or not OPENAI_API_KEY:
    raise SystemExit("Missing TELEGRAM_TOKEN or OPENAI_API_KEY")

openai.api_key = OPENAI_API_KEY
ADMIN_IDS = {123456789}
ALLOWED_CHAT_ID = None
user_context = {}

def is_authorized_chat(update: Update) -> bool:
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    return not ALLOWED_CHAT_ID or chat_id == ALLOWED_CHAT_ID or user_id in ADMIN_IDS

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "Xin ch√†o! T√¥i l√† chatbot s·ª≠ d·ª•ng OpenAI API.\n"
        "L·ªánh kh·∫£ d·ª•ng:\n"
        "‚Ä¢ /ask <c√¢u h·ªèi>\n"
        "‚Ä¢ /role <vai tr√≤>\n"
        "‚Ä¢ /me <th√¥ng tin c√° nh√¢n>\n"
        "‚Ä¢ /getid\n"
        "‚Ä¢ /addadmin <user_id> (ch·ªâ admin)"
    )

async def ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized_chat(update):
        await update.message.reply_text("‚ö†Ô∏è Bot ch·ªâ d√πng trong nh√≥m ƒë∆∞·ª£c ph√©p.")
        return
    user_id = update.effective_user.id
    question = " ".join(context.args)
    if not question:
        await update.message.reply_text("‚ùó B·∫°n ch∆∞a nh·∫≠p c√¢u h·ªèi.")
        return

    messages = []
    if user_id in user_context:
        ctx = user_context[user_id]
        sys = ctx.get("system")
        info = ctx.get("user")
        if sys and info:
            messages.append({"role": "system", "content": f"{sys}\nTh√¥ng tin ng∆∞·ªùi d√πng: {info}"})
        elif sys:
            messages.append({"role": "system", "content": sys})
        elif info:
            messages.append({"role": "system", "content": f"Th√¥ng tin ng∆∞·ªùi d√πng: {info}"})
    messages.append({"role": "user", "content": question})

    model = "gpt-4" if user_id in ADMIN_IDS else "gpt-3.5-turbo"
    try:
        response = openai.ChatCompletion.create(model=model, messages=messages, temperature=0.7)
        answer = response["choices"][0]["message"]["content"]
        await update.message.reply_text(answer)
    except Exception as e:
        logger.error("OpenAI API error: %s", e)
        await update.message.reply_text("‚ùå L·ªói khi g·ªçi OpenAI.")

async def role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized_chat(update):
        await update.message.reply_text("‚ö†Ô∏è Bot ch·ªâ d√πng trong nh√≥m ƒë∆∞·ª£c ph√©p.")
        return
    user_id = update.effective_user.id
    role_text = " ".join(context.args)
    if not user_context.get(user_id):
        user_context[user_id] = {}
    if role_text:
        user_context[user_id]["system"] = role_text
        await update.message.reply_text(f"‚úÖ ƒê·∫∑t vai tr√≤ th√†nh: *{role_text}*", parse_mode="Markdown")
    else:
        user_context[user_id].pop("system", None)
        await update.message.reply_text("üîÑ Vai tr√≤ bot ƒë·∫∑t l·∫°i m·∫∑c ƒë·ªãnh.")

async def me(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized_chat(update):
        await update.message.reply_text("‚ö†Ô∏è Bot ch·ªâ d√πng trong nh√≥m ƒë∆∞·ª£c ph√©p.")
        return
    user_id = update.effective_user.id
    info_text = " ".join(context.args)
    if not user_context.get(user_id):
        user_context[user_id] = {}
    if info_text:
        user_context[user_id]["user"] = info_text
        await update.message.reply_text("‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n.")
    else:
        user_context[user_id].pop("user", None)
        await update.message.reply_text("üîÑ ƒê√£ x√≥a th√¥ng tin c√° nh√¢n.")

async def getid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    await update.message.reply_text(f"User ID: `{user_id}`\nChat ID: `{chat_id}`", parse_mode="Markdown")

async def addadmin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid not in ADMIN_IDS:
        await update.message.reply_text("üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn.")
        return

    target_id = None
    if update.message.reply_to_message:
        target_id = update.message.reply_to_message.from_user.id
    elif context.args:
        if context.args[0].isdigit():
            target_id = int(context.args[0])
    if not target_id:
        await update.message.reply_text("‚ö†Ô∏è C√°ch d√πng: /addadmin <user_id> ho·∫∑c reply tin nh·∫Øn.")
        return
    if target_id in ADMIN_IDS:
        await update.message.reply_text(f"‚ÑπÔ∏è `{target_id}` ƒë√£ l√† admin.", parse_mode="Markdown")
    else:
        ADMIN_IDS.add(target_id)
        await update.message.reply_text(f"‚úÖ ƒê√£ th√™m `{target_id}` l√†m admin.", parse_mode="Markdown")

async def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("ask", ask))
    app.add_handler(CommandHandler("role", role))
    app.add_handler(CommandHandler("me", me))
    app.add_handler(CommandHandler("getid", getid))
    app.add_handler(CommandHandler("addadmin", addadmin))
    await app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
