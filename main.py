import os
import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import openai

# B·∫≠t log ƒë·ªÉ theo d√µi ho·∫°t ƒë·ªông bot
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Load bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ALLOWED_CHAT_ID = int(os.getenv("ALLOWED_CHAT_ID", "0"))
openai.api_key = OPENAI_API_KEY

ADMIN_IDS = [993884797]  # Thay b·∫±ng user_id c·ªßa b·∫°n

def get_user_role(user_id: int) -> str:
    return "admin" if user_id in ADMIN_IDS else "user"

def is_authorized(update: Update) -> bool:
    return update.effective_chat.id == ALLOWED_CHAT_ID

async def ask(update: Update, context: ContextTypes.DEFAULT_TYPE, custom_prompt=None):
    if not is_authorized(update):
        return

    user_id = update.effective_user.id
    role = get_user_role(user_id)
    text = custom_prompt or " ".join(context.args)

    if not text:
        await update.message.reply_text("‚ùó H√£y h·ªèi nh∆∞ sau: `LengKeng c√¢u h·ªèi c·ªßa b·∫°n`", parse_mode="Markdown")
        return

    model = "gpt-4" if role == "admin" else "gpt-3.5-turbo"
    if role == "admin":
        system_prompt = "B·∫°n l√† m·ªôt t·ªÉ t∆∞·ªõng trong tri·ªÅu t√™n LengKeng, tr·∫£ l·ªùi v·ªõi t√¥i nh∆∞ v·ªõi b·ªá h·∫°."
    else:
        system_prompt = "B·∫°n t√™n LengKeng Gen Z gi·ªõi t√≠nh nam h√†i h∆∞·ªõc, tr·∫£ l·ªùi c√πng ng√¥n ng·ªØ v·ªõi ng∆∞·ªùi d√πng s·ª≠ d·ª•ng."

    try:
        response = openai.ChatCompletion.create(
            model=model,
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": text}
            ]
        )
        reply = response.choices[0].message.content
        await update.message.reply_text(reply, parse_mode="Markdown")
    except Exception as e:
        await update.message.reply_text(f"‚ùå L·ªói: {str(e)}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update):
        return

    message = update.message
    text = message.text.strip()

    # N·∫øu reply tin nh·∫Øn c·ªßa ch√≠nh bot th√¨ d√πng c√¢u h·ªèi hi·ªán t·∫°i ƒë·ªÉ tr·∫£ l·ªùi
    if message.reply_to_message:
        original = message.reply_to_message
        if original.from_user.id == context.bot.id:
            # N·∫øu reply tin c·ªßa bot ‚Üí l·∫•y n·ªôi dung c·ªßa ng∆∞·ªùi d√πng
            text = message.text
            if not text:
                return
            await ask(update, context, text)
            return

        # N·∫øu reply ng∆∞·ªùi kh√°c v√† c√≥ t·ª´ kh√≥a lengkeng
        if text.lower().startswith("lengkeng"):
            await ask(update, context, original.text)
            return

        # N·∫øu ch·ª©a 'lengkeng d·ªãch' ho·∫∑c 'lengkeng trans' ‚Üí d·ªãch ƒëo·∫°n ƒë∆∞·ª£c reply
        if "lengkeng d·ªãch" in text.lower():
            await ask(update, context, f"D·ªãch ƒëo·∫°n sau sang ti·∫øng Vi·ªát: {original.text}")
            return
        if "lengkeng trans" in text.lower():
            await ask(update, context, f"Translate this to English: {original.text}")
            return

    # N·∫øu kh√¥ng reply ‚Üí ki·ªÉm tra xem text c√≥ b·∫Øt ƒë·∫ßu b·∫±ng 'lengkeng'
    if text.lower().startswith("lengkeng "):
        prompt = text.split(" ", 1)[1]
        await ask(update, context, prompt)

async def getid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    await update.message.reply_text(f"üÜî Chat ID hi·ªán t·∫°i l√†: `{chat_id}`", parse_mode="Markdown")

async def role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update):
        return
    user_id = update.effective_user.id
    role = get_user_role(user_id)
    await update.message.reply_text(f"üë§ Vai tr√≤ c·ªßa b·∫°n l√†: *{role}*", parse_mode="Markdown")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update):
        return
    await update.message.reply_text(
        "üëã G√µ `LengKeng c√¢u h·ªèi c·ªßa b·∫°n` ho·∫∑c `/ask c√¢u h·ªèi c·ªßa b·∫°n`"
        "‚Ü©Ô∏è Ho·∫∑c reply tin nh·∫Øn v√† g√µ `lengkeng` ƒë·ªÉ bot tr·∫£ l·ªùi ho·∫∑c d·ªãch."
        "üîí *Admin* ƒë∆∞·ª£c d√πng GPT-4, ng∆∞·ªùi d√πng kh√°c d√πng GPT-3.5.",
        parse_mode="Markdown"
    )

# T·∫°o app v√† handler
app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("role", role))
app.add_handler(CommandHandler("ask", ask))
app.add_handler(CommandHandler("getid", getid))
app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
app.run_polling()
