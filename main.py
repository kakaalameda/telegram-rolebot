import os
import logging
from dotenv import load_dotenv
from telegram import Update, Message
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import openai

# Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Load .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ALLOWED_CHAT_ID = int(os.getenv("ALLOWED_CHAT_ID", "0"))

openai.api_key = OPENAI_API_KEY
ADMIN_IDS = [993884797]

# B·ªô nh·ªõ h·ªôi tho·∫°i theo chat_id
chat_memory = {}

def get_user_role(user_id: int) -> str:
    return "admin" if user_id in ADMIN_IDS else "user"

def is_authorized(update: Update) -> bool:
    return update.effective_chat.id == ALLOWED_CHAT_ID

def get_system_prompt(role: str) -> str:
    return (
        "B·∫°n l√† m·ªôt t·ªÉ t∆∞·ªõng trong tri·ªÅu t√™n Keng, tr·∫£ l·ªùi v·ªõi t√¥i nh∆∞ v·ªõi b·ªá h·∫° v√† n√≥i b·∫±ng gi·ªçng Ngh·ªá An."
        if role == "admin"
        else "B·∫°n t√™n Keng Gen Z gi·ªõi t√≠nh nam h√†i h∆∞·ªõc, tr·∫£ l·ªùi c√πng ng√¥n ng·ªØ v·ªõi ng∆∞·ªùi d√πng s·ª≠ d·ª•ng, x∆∞ng h√¥ keng v·ªõi b·∫°n."
    )

async def call_chatgpt_with_memory(chat_id: int, prompt: str, role: str) -> str:
    system_prompt = get_system_prompt(role)
    memory = chat_memory.get(chat_id, [])
    messages = [{"role": "system", "content": system_prompt}] + memory + [{"role": "user", "content": prompt}]

    # Gi·ªõi h·∫°n ƒë·ªô d√†i memory
    if len(messages) > 5:
        messages = messages[-5:]

    response = openai.ChatCompletion.create(
        model="gpt-4" if role == "admin" else "gpt-3.5-turbo",
        messages=messages
    )

    reply = response.choices[0].message.content
    # L∆∞u v√†o memory
    chat_memory.setdefault(chat_id, []).append({"role": "user", "content": prompt})
    chat_memory[chat_id].append({"role": "assistant", "content": reply})

    return reply

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update):
        return

    msg: Message = update.message
    text = msg.text.strip()
    role = get_user_role(msg.from_user.id)
    reply_msg = msg.reply_to_message
    chat_id = msg.chat_id

    try:
        # Reply ch√≠nh bot ‚Üí ti·∫øp t·ª•c h·ªôi tho·∫°i v·ªõi context
        if reply_msg and reply_msg.from_user and reply_msg.from_user.is_bot:
            reply = await call_chatgpt_with_memory(chat_id, text, role)
            await msg.reply_text(reply, parse_mode="Markdown")
            return

        # D·ªãch ti·∫øng Vi·ªát
        if reply_msg and text.lower() == "d·ªãch":
            prompt = f"D·ªãch ƒëo·∫°n sau sang ti·∫øng Vi·ªát:{reply_msg.text}"
            reply = await call_chatgpt_with_memory(chat_id, prompt, role)
            await msg.reply_text(reply, parse_mode="Markdown")
            return

        # D·ªãch ti·∫øng Anh
        if reply_msg and text.lower() == "trans":
            prompt = f"Translate this to English:{reply_msg.text}"
            reply = await call_chatgpt_with_memory(chat_id, prompt, role)
            await msg.reply_text(reply, parse_mode="Markdown")
            return

        # Reply ng∆∞·ªùi kh√°c + g√µ "lengkeng"
        if reply_msg and text.lower() == "lengkeng":
            reply = await call_chatgpt_with_memory(chat_id, reply_msg.text, role)
            await msg.reply_text(reply, parse_mode="Markdown")
            return

        # G√µ "lengkeng ..." tr·ª±c ti·∫øp
        if text.lower().startswith("lengkeng "):
            prompt = text[9:].strip()
            reply = await call_chatgpt_with_memory(chat_id, prompt, role)
            await msg.reply_text(reply, parse_mode="Markdown")
            return

    except Exception as e:
        await msg.reply_text(f"‚ùå L·ªói: {str(e)}")

async def ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update):
        return
    role = get_user_role(update.effective_user.id)
    chat_id = update.effective_chat.id
    prompt = " ".join(context.args)
    if not prompt:
        await update.message.reply_text("‚ùó H√£y g√µ `/ask c√¢u h·ªèi`", parse_mode="Markdown")
        return
    try:
        reply = await call_chatgpt_with_memory(chat_id, prompt, role)
        await update.message.reply_text(reply, parse_mode="Markdown")
    except Exception as e:
        await update.message.reply_text(f"‚ùå L·ªói: {str(e)}")

async def getid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    await update.message.reply_text(f"üÜî Chat ID hi·ªán t·∫°i l√†: `{cid}`", parse_mode="Markdown")

async def role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    role = get_user_role(uid)
    await update.message.reply_text(f"üë§ Vai tr√≤ c·ªßa b·∫°n l√†: *{role}*", parse_mode="Markdown")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü§ñ Xin ch√†o! B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng bot nh∆∞ sau:"
        "- `lengkeng c√¢u h·ªèi` ƒë·ªÉ h·ªèi"
        "- Reply + `d·ªãch` ‚Üí d·ªãch sang ti·∫øng Vi·ªát"
        "- Reply + `trans` ‚Üí d·ªãch sang ti·∫øng Anh"
        "- Reply + `lengkeng` ‚Üí bot tr·∫£ l·ªùi n·ªôi dung ƒë∆∞·ª£c reply"
        "- Reply ch√≠nh bot ‚Üí bot tr·∫£ l·ªùi m·∫°ch l·∫°c theo ƒëo·∫°n tr∆∞·ªõc"
        "üîê *Admin* d√πng GPT-4, ng∆∞·ªùi d√πng kh√°c d√πng GPT-3.5",
        parse_mode="Markdown"
    )

# Kh·ªüi t·∫°o bot
app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("role", role))
app.add_handler(CommandHandler("getid", getid))
app.add_handler(CommandHandler("ask", ask))
app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
app.run_polling()
